import tkinter as tk
from tkinter import filedialog
import cv2
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
import mediapipe as mp
import os

# تعطيل رسائل TensorFlow التحذيرية
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

# **حدد مسار النموذج هنا**
MODEL_PATH = r'C:\Users\DELL\Desktop\project8-hand-recognetion\hand_gesture_model.h5'  # استخدم الاسم الصحيح

# التحقق من وجود النموذج
if not os.path.exists(MODEL_PATH):
    raise FileNotFoundError(f"لم يتم العثور على ملف النموذج في المسار المحدد: {MODEL_PATH}")

# تحميل النموذج المدرب
model = load_model(MODEL_PATH)

# الإيماءات المتوقعة
gestures = ["Hello", "Good", "Bad"]

# Mediapipe لإدارة اكتشاف اليد
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(static_image_mode=True, max_num_hands=1, min_detection_confidence=0.5)

def extract_hand_landmarks(image_path):
    """استخراج معالم اليد من الصورة"""
    image = cv2.imread(image_path)
    if image is None:
        return None, "تعذر تحميل الصورة. تأكد من المسار."

    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    results = hands.process(image_rgb)

    if not results.multi_hand_landmarks:
        return None, "لم يتم اكتشاف اليد في الصورة."

    hand_landmarks = results.multi_hand_landmarks[0]
    landmarks = []
    for landmark in hand_landmarks.landmark:
        landmarks.extend([landmark.x, landmark.y, landmark.z])

    if len(landmarks) != 63:
        return None, "لم يتم استخراج النقاط الصحيحة (63 نقطة)."

    return np.array(landmarks, dtype=np.float32), None

def predict_gesture(image_path):
    """التنبؤ بالإيماءة بناءً على الصورة"""
    landmarks, error = extract_hand_landmarks(image_path)
    if error:
        return error

    # إعادة تشكيل النقاط لتناسب شكل الإدخال المطلوب (1, 21, 3)
    landmarks = landmarks.reshape(1, 21, 3)

    # التنبؤ
    prediction = model.predict(landmarks)
    predicted_index = np.argmax(prediction)
    predicted_label = gestures[predicted_index]
    confidence = prediction[0][predicted_index] * 100
    return f"التنبؤ: {predicted_label} (الدقة: {confidence:.2f}%)"

def load_and_predict():
    """تحميل الصورة وتشغيل التنبؤ"""
    file_path = filedialog.askopenfilename(filetypes=[("Image Files", "*.jpg *.jpeg *.png")])
    if not file_path:
        return

    # عرض الصورة
    img = cv2.imread(file_path)
    if img is not None:
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        img_resized = cv2.resize(img_rgb, (400, 400))
        img_tk = tk.PhotoImage(data=cv2.imencode('.png', img_resized)[1].tobytes())
        image_label.config(image=img_tk)
        image_label.image = img_tk

    # تشغيل التنبؤ
    result = predict_gesture(file_path)
    result_label.config(text=result)
    upload_new_button.pack(pady=10)  # عرض زر رفع صورة جديدة بعد التنبؤ

def reset_interface():
    """إعادة تعيين الواجهة لتحميل صورة جديدة"""
    image_label.config(image="")
    image_label.image = None
    result_label.config(text="")
    upload_new_button.pack_forget()  # إخفاء الزر مرة أخرى

# إعداد واجهة المستخدم باستخدام Tkinter
window = tk.Tk()
window.title("التعرف على إشارات اليد")

# إعداد الألوان والخطوط
window.configure(bg="#f0f8ff")
font_title = ("Arial", 18, "bold")
font_text = ("Arial", 14)

# نص العنوان
title_label = tk.Label(window, text="📸 نظام التعرف على إشارات اليد 🤚", font=font_title, bg="#f0f8ff", fg="#333")
title_label.pack(pady=20)

# تعليمات
instruction_label = tk.Label(window, text="قم بتحميل صورة لإشارة يد وسيتم التعرف عليها تلقائيًا.", font=font_text, bg="#f0f8ff", fg="#555")
instruction_label.pack(pady=10)

# زر تحميل الصورة
load_button = tk.Button(window, text="تحميل صورة", font=font_text, command=load_and_predict, bg="#4caf50", fg="white", padx=10, pady=5)
load_button.pack(pady=10)

# مساحة عرض الصورة
image_label = tk.Label(window, bg="#f0f8ff")
image_label.pack()

# مساحة عرض النتيجة
result_label = tk.Label(window, text="", font=("Arial", 14), bg="#f0f8ff", fg="#000")
result_label.pack(pady=10)

# زر رفع صورة جديدة (يظهر فقط بعد التنبؤ)
upload_new_button = tk.Button(window, text="📂 رفع صورة جديدة", font=font_text, command=reset_interface, bg="#2196f3", fg="white", padx=10, pady=5)
upload_new_button.pack_forget()  # إخفاء الزر في البداية

# تشغيل التطبيق
window.mainloop()
